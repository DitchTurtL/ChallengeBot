@page "/edit"
@page "/edit/{key}"

@using ChallengeBot.Host.Data.Models
@using ChallengeBot.Host.Services
@inject IDatabaseService DatabaseService


<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Class="ma-2">Edit Challenge</MudText>
    @if (loading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        if(challenge == null)
        {
            <MudAlert Severity="Severity.Error">Challenge not found</MudAlert>
        }
        else
        {
            <MudPaper Elevation="3" Outlined="true" Class="pa-8">
                <MudText>Key: @Key</MudText>
                <MudText> ID: @challenge.Id</MudText>
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string" Label="Title" Required="true" @bind-Value="challenge.Title" RequiredError="Title is required!" Class="ma-2"/>
                        <MudTextField T="string" Label="Stub" Required="true" @bind-Value="challenge.Stub" RequiredError="Stub is required!" Class="ma-2" />
                        <MudTextField T="string" Label="Description" Variant="Variant.Text" @bind-Value="challenge.Description" Lines="5" Class="ma-2" />
                        <MudTextField T="string" Label="Content" Variant="Variant.Text" @bind-Value="challenge.Content" Lines="10" Class="ma-2" />

                    <div class="d-flex align-center justify-space-between">
                        <MudCheckBox T="bool" Label="Active" @bind-Value="challenge.Active" />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ma-2 ml-auto" OnClick="Save">Save</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        }
    }

</MudContainer>

@code {
    [Parameter]
    public string Key { get; set; }

    private bool loading;
    private Challenge? challenge;

    MudForm form;
    bool success;
    string[] errors = { };

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        challenge = await DatabaseService.GetChallengeByKey(Key);
        loading = false;
    }

    private async Task Save()
    {
        if (challenge == null)
            return;
        
        await DatabaseService.UpdateChallenge(challenge);
    }

}
