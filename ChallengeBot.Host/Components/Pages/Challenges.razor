@page "/challenges"
@page "/challenges/{stub}"
@using ChallengeBot.Host.Data.Models
@using ChallengeBot.Host.Services
@inject IDatabaseService DatabaseService
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Medium">
    
    @if (loading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        if (challenge == null)
        {
            <MudText Typo="Typo.h3" Class="ma-2">Challenges</MudText>
            <MudTable T="Challenge" Items="@challenges" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Title</MudTh>
                    <MudTh>Created</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Title">
                        @{ var url = "/challenges/" + @context.Stub;}
                        <MudLink Href="@url" OnClick="()=>Navigation.Refresh(true)">@context.Title</MudLink>
                    </MudTd>
                    <MudTd DataLabel="Created On">@context.CreatedAt</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudPaper Elevation="3" Outlined="true" Class="pa-8 ma-2">
                <MudText Typo="Typo.h3">@challenge.Title</MudText>
                <MudText Typo="Typo.subtitle1" Class="ma-2">@challenge.Description</MudText>

                @((MarkupString)challenge.Content)

            </MudPaper>
        }

    }

</MudContainer>

@code {
    [Parameter]
    public string stub { get; set; }
    private Challenge? challenge;
    private List<Challenge> challenges;

    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(stub))
        {
            challenge = await DatabaseService.GetChallengeByStubAsync(stub);
        }
        else
        {
            challenges = await DatabaseService.GetActiveChallengesAsync();
        }
    }

}
